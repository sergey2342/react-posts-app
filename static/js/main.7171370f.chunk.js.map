{"version":3,"sources":["reportWebVitals.js","redux/store.js","index.jsx","components/Preloading/Preloading.module.scss","components/Preloading/Preloading.jsx","components/MaterialStyles.jsx","services/api.js","redux/reducers/postsReducer.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","posts","postsReducer","form","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","App","React","lazy","ReactDOM","render","StrictMode","CookiesProvider","fallback","Preloading","type","document","getElementById","module","exports","PreloadingPosts","stylesLoading","loadingIcon","className","styles","root","IconThemeStyle","makeStyles","width","fill","transform","zIndex","position","ButtonStyle","height","fontSize","textTransform","outlineBlue","color","border","stroke","instance","axios","baseURL","postsApi","get","id","GET_POSTS","GET_SINGLE_POST","initialState","loading","error","getPostsThunk","state","action","Object","entries","payload","map","key","value","dispatch","data","getSinglePostThunk"],"mappings":"oMAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,0ECARQ,EAAUC,0BAAgB,CAC5BC,MAAOC,IACPC,KAAMC,MAKKC,EAFDC,sBAAYP,EAASQ,8BAAoBC,0BAAgBC,OCDjEC,G,OAAMC,IAAMC,MAAK,kBAAM,kCAM7BC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,cAACC,EAAA,EAAD,UACI,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACI,cAAC,WAAD,CAAUY,SAAU,cAACC,EAAA,EAAD,CAAYC,KAAK,QAArC,SACI,cAACT,EAAD,cAMpBU,SAASC,eAAe,SAI5B/B,K,mBChCAgC,EAAOC,QAAU,CAAC,WAAa,+BAA+B,eAAiB,qC,4ECYhEC,IAPS,SAAC,GAAY,IAAXL,EAAU,EAAVA,KAChBM,EAAgBC,cAGtB,OAAO,qBAAKC,UAAS,UAAKC,aAAL,YAA0BT,GAAgB,QAATA,EAAiBS,iBAA6B,IAA7F,SAAmG,cAAC,IAAD,CAAkBD,UAAS,UAAKF,EAAcI,Y,gCCV5J,kHAEaC,EAAiBC,YAAW,CACrCF,KAAM,CACFG,MAAO,kBACPC,KAAM,gCACNC,UAAW,iBACXC,OAAQ,IACRC,SAAU,cAILC,EAAcN,YAAW,CAClCF,KAAM,CACFS,OAAQ,OACR,qBAAsB,CAClBC,SAAU,OACVC,cAAe,QAEnB,yBAA0B,IAK9BC,YAAc,CACV,qBAAsB,CAClBC,MAAO,oBAEX,yBAA0B,CACtBA,MAAO,mBACPC,OAAQ,iCAKPjB,EAAcK,YAAW,CAClCF,KAAM,CACF,WAAY,CACRe,OAAQ,wB,wHCpCdC,E,MAAYC,OAAa,CAAEC,QAAS,8DAE7BC,EACC,kBAAMH,EAASI,IAAI,gBADpBD,EAEM,SAAAE,GAAE,OAAIL,EAASI,IAAT,iBAAuBC,EAAvB,WCJZC,EAAY,YACZC,EAAkB,kBAGzBC,EAAe,CACjBC,SAAS,EACTC,MAAO,KACPtD,MAAO,IA8BEuD,GAHEtD,IAxBM,WAAmC,IAAlCuD,EAAiC,uDAAzBJ,EAAcK,EAAW,uCACnD,OAAOA,EAAOvC,MACV,KAAKgC,EACG,IAAMlD,EAAQ0D,OAAOC,QAAQF,EAAOG,SAASC,KAAI,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACnE,OAAO,aAAEd,GAAIa,GAAQC,MAEzB,OAAO,2BACAP,GADP,IAEIH,SAAS,EACTC,MAAO,KACPtD,MAAOA,IAEf,KAAKmD,EACD,OAAO,2BACAK,GADP,IAEIH,SAAS,EACTC,MAAO,KACPtD,MAAO,CAACyD,EAAOG,WAEvB,QACI,OAAOJ,IAOU,SAAAQ,GACzBjB,IACKvD,MAAK,gBAAGyE,EAAH,EAAGA,KAAH,OAAcD,EAAS,CAAE9C,KAAMgC,EAAWU,QAASK,SAGpDC,EAAqB,SAAAjB,GAAE,OAAI,SAAAe,GACpCjB,EAAuBE,GAClBzD,MAAK,gBAAGyE,EAAH,EAAGA,KAAH,OAAcA,GAAQD,EAAS,CAAE9C,KAAMiC,EAAiBS,QAAQ,aAAEX,GAAIA,GAAOgB,Y","file":"static/js/main.7171370f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nimport postsReducer from './reducers/postsReducer'\r\n\r\nconst reducer = combineReducers({\r\n    posts: postsReducer,\r\n    form: formReducer\r\n})\r\n\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunkMiddleware)))\r\n\r\nexport default store","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport reportWebVitals from './reportWebVitals'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { CookiesProvider } from 'react-cookie';\n\nimport Preloading from './components/Preloading/Preloading'\nimport store from './redux/store'\nimport './index.scss'\n\nconst App = React.lazy(() => import('./components/App/App'))\n\n\n\n// console.log(process.env.PUBLIC_URL)\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <CookiesProvider>\n                <Provider store={store}>\n                    <Suspense fallback={<Preloading type=\"app\" />}>\n                        <App />\n                    </Suspense>\n                </Provider>\n            </CookiesProvider>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloading\":\"Preloading_preloading__1k5qK\",\"preloading_app\":\"Preloading_preloading_app__1AqD0\"};","import React from 'react'\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport * as styles from './Preloading.module.scss'\r\nimport { loadingIcon } from '../MaterialStyles'\r\n\r\nconst PreloadingPosts = ({type}) => {\r\n    const stylesLoading = loadingIcon()\r\n\r\n\r\n    return <div className={`${styles.preloading} ${type ? type === 'app' ? styles.preloading_app : '' : ''}`}><CircularProgress className={`${stylesLoading.root}`} /></div>\r\n}\r\n\r\nexport default PreloadingPosts","import { makeStyles, withStyles } from '@material-ui/core/styles'\r\n\r\nexport const IconThemeStyle = makeStyles({\r\n    root: {\r\n        width: '20px !important',\r\n        fill: 'var(--yellowColor) !important',\r\n        transform: 'rotate(150deg)',\r\n        zIndex: '0',\r\n        position: 'relative'\r\n    }\r\n})\r\n\r\nexport const ButtonStyle = makeStyles({\r\n    root: {\r\n        height: '40px',\r\n        '& .MuiButton-label': {\r\n            fontSize: '16px',\r\n            textTransform: 'none'\r\n        },\r\n        '& .MuiTouchRipple-root': {\r\n\r\n        }\r\n    }, \r\n\r\n    outlineBlue : {\r\n        '& .MuiButton-label': {\r\n            color: 'var(--blueColor)',\r\n        },\r\n        '& .MuiTouchRipple-root': {\r\n            color: 'var(--blueColor)',\r\n            border: '1px solid var(--blueColor)'\r\n        }\r\n    }\r\n})\r\n\r\nexport const loadingIcon = makeStyles({\r\n    root: {\r\n        '& circle': {\r\n            stroke: 'var(--blueColor)'\r\n        }\r\n    }\r\n}) ","import * as axios from 'axios'\r\n\r\nconst instance  = axios.create({ baseURL: 'https://react-posts-app-33d31-default-rtdb.firebaseio.com' })\r\n\r\nexport const postsApi = {\r\n    getPosts: () => instance.get('/posts.json'),\r\n    getSinglePost: id => instance.get(`/posts/${id}.json`)\r\n}","import { postsApi } from '../../services/api'\r\n\r\nexport const GET_POSTS = 'GET_POSTS'\r\nexport const GET_SINGLE_POST = 'GET_SINGLE_POST'\r\n\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    error: null,\r\n    posts: []\r\n}\r\n\r\nconst postsReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case GET_POSTS:\r\n                const posts = Object.entries(action.payload).map(([key, value]) => {\r\n                return { id: key, ...value }\r\n            })\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: null,\r\n                posts: posts\r\n            }\r\n        case GET_SINGLE_POST:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: null,\r\n                posts: [action.payload]\r\n            }\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport default postsReducer\r\n\r\n\r\nexport const getPostsThunk = dispatch => {\r\n    postsApi.getPosts()\r\n        .then(({ data }) => dispatch({ type: GET_POSTS, payload: data }))\r\n}\r\n\r\nexport const getSinglePostThunk = id => dispatch => {\r\n    postsApi.getSinglePost(id)\r\n        .then(({ data }) => data && dispatch({ type: GET_SINGLE_POST, payload: {id: id, ...data}}))\r\n}"],"sourceRoot":""}